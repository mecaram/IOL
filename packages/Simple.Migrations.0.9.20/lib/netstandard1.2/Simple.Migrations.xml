<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Migrations</name>
    </assembly>
    <members>
        <member name="T:SimpleMigrations.AssemblyMigrationProvider">
            <summary>
            <see cref="T:SimpleMigrations.IMigrationProvider"/>  which finds migrations by scanning an assembly, optionally
            filtering by namespace.
            </summary>
        </member>
        <member name="M:SimpleMigrations.AssemblyMigrationProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.AssemblyMigrationProvider"/> class
            </summary>
            <param name="migrationAssembly">Assembly to scan for migrations</param>
            <param name="migrationNamespace">Optional namespace. If specified, only finds migrations in that namespace</param>
        </member>
        <member name="M:SimpleMigrations.AssemblyMigrationProvider.LoadMigrations">
            <summary>
            Load all migration info. These can be in any order
            </summary>
            <returns>All migration info</returns>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBase">
            <summary>
            Database provider which acts by maintaining a table of applied versions
            </summary>
            <remarks>
            Methods on this class are called according to a strict sequence.
            
            When <see cref="M:SimpleMigrations.SimpleMigrator`2.Load"/> is called:
                1. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EnsurePrerequisitesCreatedAndGetCurrentVersion"/> is invoked
            
            
            When <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or 
            <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/> is called:
                1. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>  is called.
                2. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCurrentVersion"/> is called.
                3. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.UpdateVersion(System.Int64,System.Int64,System.String)"/>is called (potentially multiple times)
                4. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCurrentVersion"/> is called.
                5. <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EndOperation"/>is called.
                
            Different databases require different locking strategies to guard against concurrent migrators.
            
            Databases which support advisory locks typically have a single connection, and use this for obtaining
            the advisory lock, running migrations, and updating the VersionInfo table. The advisory lock is obtained
            when creating the VersionInfo table also.
            
            Databases which do not support advisory locks typically have a connection factory. Inside
            <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/> they will create two connections. One creates a transaction and uses it to
            lock the VersionInfo table, and also to update the VersionInfo table, while the other is used to run migrations.
            
            The subclasses <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock"/> and <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock"/>
            encapsulate these concepts.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.TableName">
            <summary>
            Table name used to store version info. Defaults to 'VersionInfo'
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.MaxDescriptionLength">
            <summary>
            If > 0, specifies the maximum length of the 'Description' field. Descriptions longer will be truncated
            </summary>
            <remarks>
            Database providers which put a maximum length on the Description field should set this to that length
            </remarks>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EnsurePrerequisitesCreatedAndGetCurrentVersion">
            <summary>
            Ensures that the schema (if appropriate) and version table are created, and returns the current version.
            </summary>
            <remarks>
            This is not surrounded by calls to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/> or <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EndOperation"/>, so
            it should do whatever locking is appropriate to guard against concurrent migrators.
            
            If the version table is empty, this should return 0.
            </remarks>
            <returns>The current version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EnsurePrerequisitesCreatedAndGetCurrentVersion(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Helper method which ensures that the schema and VersionInfo table are created, and fetches the current version from it,
            using the given connection and transaction.
            </summary>
            <param name="connection">Connection to use</param>
            <param name="transaction">Transaction to use</param>
            <returns>The current version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation">
            <summary>
            Called when <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/>
            is invoked, before any migrations are run. This should create connections and/or transactions and/or locks if necessary,
            and return the connection for the migrations to use.
            </summary>
            <returns>Connection for the migrations to use</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EndOperation">
            <summary>
            Cleans up any connections and/or transactions and/or locks created by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>
            </summary>
            <remarks>
            This is always paired with a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>: it is called exactly once for every time that
            <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/> is called.
            </remarks>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCurrentVersion">
            <summary>
            Fetch the current database schema version, or 0.
            </summary>
            <remarks>
            This method is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>, but before a call to
            <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EndOperation"/>. Therefore it may use a connection created by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>.
            
            If this databases uses locking on the VersionInfo table to guard against concurrent migrators, this
            method should use the connection that lock was acquired on.
            </remarks>
            <returns>The current database schema version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCurrentVersion(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Helper method to fetch the current database version, using the given connection and transaction.
            </summary>
            <remarks>
            The transaction may be null.
            </remarks>
            <param name="connection">Connection to use</param>
            <param name="transaction">transaction to use, may be null</param>
            <returns>The current database schema version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.UpdateVersion(System.Int64,System.Int64,System.String)">
            <summary>
            Update the VersionInfo table to indicate that the given migration was successfully applied.
            </summary>
            <remarks>
            This is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/> but before a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.EndOperation"/>,
            Therefore it may use a connection created by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.BeginOperation"/>.
            </remarks>
            <param name="oldVersion">The previous version of the database schema</param>
            <param name="newVersion">The version of the new database schema</param>
            <param name="newDescription">The description of the migration which was applied</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.UpdateVersion(System.Int64,System.Int64,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Helper method to update the VersionInfo table to indicate that the given migration was successfully applied,
            using the given connectoin and transaction.
            </summary>
            <param name="oldVersion">The previous version of the database schema</param>
            <param name="newVersion">The version of the new database schema</param>
            <param name="newDescription">The description of the migration which was applied</param>
            <param name="connection">Connection to use</param>
            <param name="transaction">Transaction to use, may be null</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCreateSchemaTableSql">
            <summary>
            Should return 'CREATE SCHEMA IF NOT EXISTS', or similar
            </summary>
            <remarks>
            Don't override if the database has no concept of schemas
            </remarks>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCreateVersionTableSql">
            <summary>
            Should return 'CREATE TABLE IF NOT EXISTS', or similar
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetCurrentVersionSql">
            <summary>
            Should return SQL which selects a single long value - the current version - or 0/NULL if there is no current version
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBase.GetSetVersionSql">
            <summary>
            Returns SQL which upgrades to a particular version.
            </summary>
            <remarks>
            The following parameters may be used:
             - @Version - the long version to set
             - @Description - the description of the version
             - @OldVersion - the long version being migrated from
            </remarks>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock">
            <summary>
            <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBase"/> subclass for databases which use an advisory lock to guard against concurrent
            migrators.
            </summary>
            <remarks>
            This uses a single connection, which it does not take ownership of (i.e. it is up to the caller to close it).
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.Connection">
            <summary>
            Gets the connection used for all database operations
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.LockTimeout">
            <summary>
            Gets or sets the timeout when acquiring the advisory lock
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock"/> class
            </summary>
            <param name="connection">Database connection to use for all operations</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.EnsurePrerequisitesCreatedAndGetCurrentVersion">
            <summary>
            Ensures that the schema (if appropriate) and version table are created, and returns the current version.
            </summary>
            <remarks>
            This is not surrounded by calls to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.BeginOperation"/> or <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.EndOperation"/>, so
            it should do whatever locking is appropriate to guard against concurrent migrators.
            
            If the version table is empty, this should return 0.
            </remarks>
            <returns>The current version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.BeginOperation">
            <summary>
            Called when <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/>
            is invoked, before any migrations are run. This invokes <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.AcquireAdvisoryLock"/> to acquire the advisory lock.
            </summary>
            <returns>Connection for the migrations to use</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.EndOperation">
            <summary>
            Called after migrations are run, this invokes <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.ReleaseAdvisoryLock"/> to release the advisory lock.
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.GetCurrentVersion">
            <summary>
            Fetch the current database schema version, or 0.
            </summary>
            <remarks>
            This method is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.BeginOperation"/>, but before a call to
            <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.EndOperation"/>. Therefore the advisory lock has already been acquired.
            </remarks>
            <returns>The current database schema version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.UpdateVersion(System.Int64,System.Int64,System.String)">
            <summary>
            Update the VersionInfo table to indicate that the given migration was successfully applied.
            </summary>
            <remarks>
            This is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.BeginOperation"/> but before a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.EndOperation"/>,
            Therefore the advisory lock has already been acquired.
            </remarks>
            <param name="oldVersion">The previous version of the database schema</param>
            <param name="newVersion">The version of the new database schema</param>
            <param name="newDescription">The description of the migration which was applied</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.AcquireAdvisoryLock">
            <summary>
            Acquires an advisory lock using <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.Connection"/>
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.ReleaseAdvisoryLock">
            <summary>
            Releases the advisory lock held on <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock.Connection"/>
            </summary>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock">
            <summary>
            <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBase"/> subclass for databases which use a transaction on the VersionInfo table to guard
            against concurrent migrators.
            </summary>
            <remarks>
            This uses two connections for each operation: one which uses a transaction to acquire a lock on the VersionInfo table
            and to update it, and another to run migrations on.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.ConnectionFactory">
            <summary>
            Gets the factory used to create new database connections
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection">
            <summary>
            Gets or sets the connection used to acquire a lock on the VersionInfo table, and to update the VersionInfo
            table.
            </summary>
            <remarks>
            This is set by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/>, and cleated by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableLockTransaction">
            <summary>
            Gets or sets the transaction on the <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection"/> used to lock it.
            </summary>
            <remarks>
            This is set by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/>, and cleated by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.MigrationsConnection">
            <summary>
            Gets or sets the connection to be used by migrations.
            </summary>
            <remarks>
            This is set by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/>, and cleated by <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>.
            </remarks>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.#ctor(System.Func{System.Data.Common.DbConnection})">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock"/> class
            </summary>
            <param name="connectionFactory">Factory to be used to create new connections</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EnsurePrerequisitesCreatedAndGetCurrentVersion">
            <summary>
            Ensures that the version table is created, and returns the current version.
            </summary>
            <remarks>
            This is not surrounded by calls to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/> or <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>, so
            it should create its own connection.
            
            If the version table is empty, this should return 0.
            </remarks>
            <returns>The current version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation">
            <summary>
            Called when <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/>
            is invoked, before any migrations are run. This creates the <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection"/> and 
            <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.MigrationsConnection"/>, and invokes <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.AcquireVersionTableLock"/> to acquire the VersionInfo table lock.
            </summary>
            <returns>Connection for the migrations to use</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation">
            <summary>
            Called after migrations are run, this invokes <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.AcquireVersionTableLock"/> to release the VersionInfo table lock, and
            then closes <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection"/> and <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.MigrationsConnection"/>"/>
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.GetCurrentVersion">
            <summary>
            Fetch the current database schema version, or 0.
            </summary>
            <remarks>
            This method is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/>, but before a call to
            <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>. It should use <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection"/> and <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableLockTransaction"/>
            </remarks>
            <returns>The current database schema version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.UpdateVersion(System.Int64,System.Int64,System.String)">
            <summary>
            Update the VersionInfo table to indicate that the given migration was successfully applied.
            </summary>
            <remarks>
            This is always invoked after a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.BeginOperation"/> but before a call to <see cref="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.EndOperation"/>,
            It should use <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableConnection"/> and <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableLockTransaction"/>
            </remarks>
            <param name="oldVersion">The previous version of the database schema</param>
            <param name="newVersion">The version of the new database schema</param>
            <param name="newDescription">The description of the migration which was applied</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.AcquireVersionTableLock">
            <summary>
            Creates and sets <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableLockTransaction"/>, and uses it to lock the VersionInfo table
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.ReleaseVersionTableLock">
            <summary>
            Destroys <see cref="P:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock.VersionTableLockTransaction"/>, thus releasing the VersionInfo table lock
            </summary>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider">
            <summary>
            Class which can read from / write to a version table in an MSSQL database
            </summary>
            <remarks>
            MSSQL supports advisory locks, so these are used to guard against concurrent migrators.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.SchemaName">
            <summary>
            Gets or sets the schema name used to store the version table.
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.CreateSchema">
            <summary>
            Controls whether or not to try and create the schema if it does not exist.
            </summary>
            <remarks>
            If this is set to false then no schema is created. It is the user's responsibility to create the schema
            (if necessary) with the correct name and permissions before running the <see cref="T:SimpleMigrations.SimpleMigrator"/>. This may be
            required if the user which Simple.Migrator is running as does not have the correct permissions to check whether the
            schema has been created.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.AdvisoryLockName">
            <summary>
            Gets or sets the name of the advisory lock to acquire
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.LockName">
            <summary>
            This property has been obsoleted. Use <see cref="P:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.AdvisoryLockName"/> instead
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider"/> class
            </summary>
            <param name="connection">Connection to use to run migrations. The caller is responsible for closing this.</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.AcquireAdvisoryLock">
            <summary>
            Acquires an advisory lock using Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.ReleaseAdvisoryLock">
            <summary>
            Releases the advisory lock held on Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.GetCreateSchemaTableSql">
            <summary>
            Returns SQL to create the schema
            </summary>
            <returns>SQL to create the schema</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.GetCreateVersionTableSql">
            <summary>
            Returns SQL to create the version table
            </summary>
            <returns>SQL to create the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.GetCurrentVersionSql">
            <summary>
            Returns SQL to fetch the current version from the version table
            </summary>
            <returns>SQL to fetch the current version from the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MssqlDatabaseProvider.GetSetVersionSql">
            <summary>
            Returns SQL to update the current version in the version table
            </summary>
            <returns>SQL to update the current version in the version table</returns>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider">
            <summary>
            Class which can read from / write to a version table in an MySQL database
            </summary>
            <remarks>
            MySQL supports advisory locks, so these are used to guard against concurrent migrators.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.AdvisoryLockName">
            <summary>
            Gets or sets the name of the advisory lock to acquire
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.LockName">
            <summary>
            This property has been obsoleted. Use <see cref="P:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.AdvisoryLockName"/> instead
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider"/> class
            </summary>
            <param name="connection">Connection to use to run migrations. The caller is responsible for closing this.</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.AcquireAdvisoryLock">
            <summary>
            Acquires an advisory lock using Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.ReleaseAdvisoryLock">
            <summary>
            Releases the advisory lock held on Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.GetCreateVersionTableSql">
            <summary>
            Returns SQL to create the version table
            </summary>
            <returns>SQL to create the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.GetCurrentVersionSql">
            <summary>
            Returns SQL to fetch the current version from the version table
            </summary>
            <returns>SQL to fetch the current version from the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.MysqlDatabaseProvider.GetSetVersionSql">
            <summary>
            Returns SQL to update the current version in the version table
            </summary>
            <returns>SQL to update the current version in the version table</returns>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider">
            <summary>
            Class which can read from / write to a version table in an PostgreSQL database
            </summary>
            <remarks>
            PostgreSQL supports advisory locks, so these are used to guard against concurrent migrators.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.SchemaName">
            <summary>
            Gets or sets the schema name used to store the version table.
            </summary>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.CreateSchema">
            <summary>
            Controls whether or not to try and create the schema if it does not exist.
            </summary>
            <remarks>
            If this is set to false then no schema is created. It is the user's responsibility to create the schema
            (if necessary) with the correct name and permissions before running the <see cref="T:SimpleMigrations.SimpleMigrator"/>. This may be
            required if the user which Simple.Migrator is running as does not have the correct permissions to check whether the
            schema has been created.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.AdvisoryLockKey">
            <summary>
            Gets or sets the key to use when acquiring the advisory lock
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider"/> class
            </summary>
            <param name="connection">Connection to use to run migrations. The caller is responsible for closing this.</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.AcquireAdvisoryLock">
            <summary>
            Acquires an advisory lock using Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.ReleaseAdvisoryLock">
            <summary>
            Releases the advisory lock held on Connection
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.GetCreateSchemaTableSql">
            <summary>
            Returns SQL to create the schema
            </summary>
            <returns>SQL to create the schema</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.GetCreateVersionTableSql">
            <summary>
            Returns SQL to create the version table
            </summary>
            <returns>SQL to create the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.GetCurrentVersionSql">
            <summary>
            Returns SQL to fetch the current version from the version table
            </summary>
            <returns>SQL to fetch the current version from the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.PostgresqlDatabaseProvider.GetSetVersionSql">
            <summary>
            Returns SQL to update the current version in the version table
            </summary>
            <returns>SQL to update the current version in the version table</returns>
        </member>
        <member name="T:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider">
            <summary>
            Class which can read from / write to a version table in an SQLite database
            </summary>
            <remarks>
            SQLite does not support advisory locks, and its transaction model means that we cannot use a transaction on the
            VersionInfo table to guard against concurrent migrators. Therefore this database does not provide support for
            concurrent migrators.
            </remarks>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider"/> class
            </summary>
            <param name="connection">Connection to use to run migrations. The caller is responsible for closing this.</param>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.AcquireAdvisoryLock">
            <summary>
            No-op: SQLite does not support advisory locks
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.ReleaseAdvisoryLock">
            <summary>
            No-op: SQLite does not support advisory locks
            </summary>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.GetCreateVersionTableSql">
            <summary>
            Returns SQL to create the version table
            </summary>
            <returns>SQL to create the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.GetCurrentVersionSql">
            <summary>
            Returns SQL to fetch the current version from the version table
            </summary>
            <returns>SQL to fetch the current version from the version table</returns>
        </member>
        <member name="M:SimpleMigrations.DatabaseProvider.SqliteDatabaseProvider.GetSetVersionSql">
            <summary>
            Returns SQL to update the current version in the version table
            </summary>
            <returns>SQL to update the current version in the version table</returns>
        </member>
        <member name="T:SimpleMigrations.IDatabaseProvider`1">
            <summary>
            Interface representing database-type-specific operations which needs to be performed
            </summary>
            <remarks>
            Methods on this interface are called according to a strict sequence.
            
            When <see cref="M:SimpleMigrations.SimpleMigrator`2.Load"/> is called:
                1. <see cref="M:SimpleMigrations.IDatabaseProvider`1.EnsurePrerequisitesCreatedAndGetCurrentVersion"/> is invoked
            
            
            When <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or 
            <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/> is called:
                1. <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>  is called.
                2. <see cref="M:SimpleMigrations.IDatabaseProvider`1.GetCurrentVersion"/> is called.
                3. <see cref="M:SimpleMigrations.IDatabaseProvider`1.UpdateVersion(System.Int64,System.Int64,System.String)"/>is called (potentially multiple times)
                4. <see cref="M:SimpleMigrations.IDatabaseProvider`1.GetCurrentVersion"/> is called.
                5. <see cref="M:SimpleMigrations.IDatabaseProvider`1.EndOperation"/>is called.
                
            Different databases require different locking strategies to guard against concurrent migrators.
            
            Databases which support advisory locks typically have a single connection, and use this for obtaining
            the advisory lock, running migrations, and updating the VersionInfo table. The advisory lock is obtained
            when creating the VersionInfo table also.
            
            Databases which do not support advisory locks typically have a connection factory. Inside
            <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/> they will create two connections. One creates a transaction and uses it to
            lock the VersionInfo table, and also to update the VersionInfo table, while the other is used to run migrations.
            
            The subclasses <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithAdvisoryLock"/> and <see cref="T:SimpleMigrations.DatabaseProvider.DatabaseProviderBaseWithVersionTableLock"/>
            encapsulate these concepts.
            </remarks>
            <typeparam name="TConnection">Type of database connection</typeparam>
        </member>
        <member name="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation">
            <summary>
            Called when <see cref="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)"/> or <see cref="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)"/>
            is invoked, before any migrations are run. This should create connections and/or transactions and/or locks if necessary,
            and return the connection for the migrations to use.
            </summary>
            <returns>Connection for the migrations to use</returns>
        </member>
        <member name="M:SimpleMigrations.IDatabaseProvider`1.EndOperation">
            <summary>
            Cleans up any connections and/or transactions and/or locks created by <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>
            </summary>
            <remarks>
            This is always paired with a call to <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>: it is called exactly once for every time that
            <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/> is called.
            </remarks>
        </member>
        <member name="M:SimpleMigrations.IDatabaseProvider`1.EnsurePrerequisitesCreatedAndGetCurrentVersion">
            <summary>
            Ensures that the version table is created, and returns the current version.
            </summary>
            <remarks>
            This is not surrounded by calls to <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/> or <see cref="M:SimpleMigrations.IDatabaseProvider`1.EndOperation"/>, so
            it should do whatever locking is appropriate to guard against concurrent migrators.
            
            If the version table is empty, this should return 0.
            </remarks>
            <returns>The current version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.IDatabaseProvider`1.GetCurrentVersion">
            <summary>
            Fetch the current database schema version, or 0.
            </summary>
            <remarks>
            This method is always invoked after a call to <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>, but before a call to
            <see cref="M:SimpleMigrations.IDatabaseProvider`1.EndOperation"/>. Therefore it may use a connection created by <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>.
            
            If this databases uses locking on the VersionInfo table to guard against concurrent migrators, this
            method should use the connection that lock was acquired on.
            </remarks>
            <returns>The current database schema version, or 0</returns>
        </member>
        <member name="M:SimpleMigrations.IDatabaseProvider`1.UpdateVersion(System.Int64,System.Int64,System.String)">
            <summary>
            Update the VersionInfo table to indicate that the given migration was successfully applied.
            </summary>
            <remarks>
            This is always invoked after a call to <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/> but before a call to <see cref="M:SimpleMigrations.IDatabaseProvider`1.EndOperation"/>,
            Therefore it may use a connection created by <see cref="M:SimpleMigrations.IDatabaseProvider`1.BeginOperation"/>.
            </remarks>
            <param name="oldVersion">The previous version of the database schema</param>
            <param name="newVersion">The version of the new database schema</param>
            <param name="newDescription">The description of the migration which was applied</param>
        </member>
        <member name="T:SimpleMigrations.ILogger">
            <summary>
            A logger, which can log migration progress and output
            </summary>
        </member>
        <member name="M:SimpleMigrations.ILogger.BeginSequence(SimpleMigrations.MigrationData,SimpleMigrations.MigrationData)">
            <summary>
            Invoked when a sequence of migrations is started
            </summary>
            <param name="from">Migration being migrated from</param>
            <param name="to">Migration being migrated to</param>
        </member>
        <member name="M:SimpleMigrations.ILogger.EndSequence(SimpleMigrations.MigrationData,SimpleMigrations.MigrationData)">
            <summary>
            Invoked when a sequence of migrations is completed successfully
            </summary>
            <param name="from">Migration which was migrated from</param>
            <param name="to">Migration which was migrated to</param>
        </member>
        <member name="M:SimpleMigrations.ILogger.EndSequenceWithError(System.Exception,SimpleMigrations.MigrationData,SimpleMigrations.MigrationData)">
            <summary>
            Invoked when a sequence of migrations fails with an error
            </summary>
            <param name="exception">Exception which was encountered</param>
            <param name="from">Migration which was migrated from</param>
            <param name="currentVersion">Last successful migration which was applied</param>
        </member>
        <member name="M:SimpleMigrations.ILogger.BeginMigration(SimpleMigrations.MigrationData,SimpleMigrations.MigrationDirection)">
            <summary>
            Invoked when an individual migration is started
            </summary>
            <param name="migration">Migration being started</param>
            <param name="direction">Direction of the migration</param>
        </member>
        <member name="M:SimpleMigrations.ILogger.EndMigration(SimpleMigrations.MigrationData,SimpleMigrations.MigrationDirection)">
            <summary>
            Invoked when an individual migration is completed successfully
            </summary>
            <param name="migration">Migration which completed</param>
            <param name="direction">Direction of the migration</param>
        </member>
        <member name="M:SimpleMigrations.ILogger.EndMigrationWithError(System.Exception,SimpleMigrations.MigrationData,SimpleMigrations.MigrationDirection)">
            <summary>
            Invoked when an individual migration fails with an error
            </summary>
            <param name="exception">Exception which was encountered</param>
            <param name="migration">Migration which failed</param>
            <param name="direction">Direction of the migration</param>
        </member>
        <member name="T:SimpleMigrations.IMigration`1">
            <summary>
            Interface which must be implemented by all migrations, although you probably want to derive from <see cref="T:SimpleMigrations.Migration"/> instead
            </summary>
            <typeparam name="TConnection">Type of database connection which this migration will use</typeparam>
        </member>
        <member name="M:SimpleMigrations.IMigration`1.RunMigration(SimpleMigrations.MigrationRunData{`0})">
            <summary>
            Run the migration in the given direction, using the given connection and logger
            </summary>
            <remarks>
            The migration should create a transaction if appropriate
            </remarks>
            <param name="data">Data used by the migration</param>
        </member>
        <member name="T:SimpleMigrations.IMigrationLogger">
            <summary>
            Logger used by migrations to log things
            </summary>
        </member>
        <member name="M:SimpleMigrations.IMigrationLogger.Info(System.String)">
            <summary>
            Invoked when another informative message should be logged
            </summary>
            <param name="message">Message to be logged</param>
        </member>
        <member name="M:SimpleMigrations.IMigrationLogger.LogSql(System.String)">
            <summary>
            Invoked when SQL being executed should be logged
            </summary>
            <param name="sql">SQL to log</param>
        </member>
        <member name="T:SimpleMigrations.IMigrationProvider">
            <summary>
            Defines a class which loads the list of migration metadata
            </summary>
            <remarks>
            By default this is implemented by <see cref="T:SimpleMigrations.AssemblyMigrationProvider"/>
            </remarks>
        </member>
        <member name="M:SimpleMigrations.IMigrationProvider.LoadMigrations">
            <summary>
            Load all migration info. These can be in any order
            </summary>
            <returns>All migration info</returns>
        </member>
        <member name="T:SimpleMigrations.ISimpleMigrator">
            <summary>
            Interface defining how to interact with a SimpleMigrator
            </summary>
        </member>
        <member name="P:SimpleMigrations.ISimpleMigrator.Logger">
            <summary>
            Gets and sets the logger to use. May be null
            </summary>
        </member>
        <member name="P:SimpleMigrations.ISimpleMigrator.CurrentMigration">
            <summary>
            Gets the currently-applied migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.ISimpleMigrator.LatestMigration">
            <summary>
            Gets the latest available migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.ISimpleMigrator.Migrations">
            <summary>
            Gets all available migrations
            </summary>
        </member>
        <member name="M:SimpleMigrations.ISimpleMigrator.Load">
            <summary>
            Load all available migrations, and the current state of the database
            </summary>
        </member>
        <member name="M:SimpleMigrations.ISimpleMigrator.MigrateToLatest">
            <summary>
            Migrate up to the latest version
            </summary>
        </member>
        <member name="M:SimpleMigrations.ISimpleMigrator.MigrateTo(System.Int64)">
            <summary>
            Migrate to a specific version
            </summary>
            <param name="newVersion">Version to migrate to</param>
        </member>
        <member name="M:SimpleMigrations.ISimpleMigrator.Baseline(System.Int64)">
            <summary>
            Pretend that the database is at the given version, without running any migrations.
            This is useful for introducing SimpleMigrations to an existing database.
            </summary>
            <param name="version">Version to introduce</param>
        </member>
        <member name="T:SimpleMigrations.Migration">
            <summary>
            Base class, intended to be used by all migrations (although you may implement <see cref="T:SimpleMigrations.IMigration`1"/> directly if you wish).
            Migrations MUST apply the <see cref="T:SimpleMigrations.MigrationAttribute"/> attribute
            </summary>
        </member>
        <member name="P:SimpleMigrations.Migration.UseTransaction">
            <summary>
            Gets or sets a value indicating whether calls to <see cref="M:SimpleMigrations.Migration.Execute(System.String,System.Nullable{System.Int32})"/> should be run inside of a transaction.
            </summary>
            <remarks>
            If this is false, <see cref="P:SimpleMigrations.Migration.Transaction"/> will not be set.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.Migration.Connection">
            <summary>
            Gets or sets the database to be used by this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.Migration.Logger">
            <summary>
            Gets or sets the logger to be used by this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.Migration.Transaction">
            <summary>
            Gets the transaction to use when running comments.
            </summary>
            <remarks>
            This is set only if <see cref="P:SimpleMigrations.Migration.UseTransaction"/> is true.
            </remarks>
        </member>
        <member name="M:SimpleMigrations.Migration.Up">
            <summary>
            Invoked when this migration should migrate up
            </summary>
        </member>
        <member name="M:SimpleMigrations.Migration.Down">
            <summary>
            Invoked when this migration should migrate down
            </summary>
        </member>
        <member name="M:SimpleMigrations.Migration.Execute(System.String,System.Nullable{System.Int32})">
            <summary>
            Execute and log an SQL query (which returns no data)
            </summary>
            <param name="sql">SQL to execute</param>
            <param name="commandTimeout">The command timeout to use (in seconds), or null to use the default from your ADO.NET provider</param>
        </member>
        <member name="M:SimpleMigrations.Migration.CreateCommand(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbCommand"/>, which is used by <see cref="M:SimpleMigrations.Migration.Execute(System.String,System.Nullable{System.Int32})"/> to execute SQL commands
            </summary>
            <remarks>
            You can use this method to create commands if you want to set parameters, or access the result of a query.
            Override this method if you want to customise how commands are created, e.g. by setting other properties on <see cref="T:System.Data.Common.DbCommand"/>.
            </remarks>
            <param name="sql">SQL to execute</param>
            <param name="commandTimeout">The command timeout to use (in seconds), or null to use the default from your ADO.NET provider</param>
            <returns>
            A <see cref="T:System.Data.Common.DbCommand"/> which is configured with the <see cref="P:System.Data.Common.DbCommand.CommandText"/>, <see cref="P:System.Data.Common.DbCommand.Transaction"/>,
            and <see cref="P:System.Data.Common.DbCommand.CommandTimeout"/> properties set.
            </returns>
        </member>
        <member name="T:SimpleMigrations.MigrationAttribute">
            <summary>
            [Migration(version)] attribute which must be applied to all migrations
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationAttribute.Version">
            <summary>
            Version of this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationAttribute.Description">
            <summary>
            Gets or sets the optional description of this migration
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationAttribute.#ctor(System.Int64,System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.MigrationAttribute"/> class
            </summary>
            <param name="version">Version of this migration</param>
            <param name="description">Optional description of this migration</param>
        </member>
        <member name="T:SimpleMigrations.MigrationData">
            <summary>
            Class representing data about a migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationData.Version">
            <summary>
            Version of this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationData.Description">
            <summary>
            Description of this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationData.TypeInfo">
            <summary>
            Type of class implementing this migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationData.FullName">
            <summary>
            Name of the migration, including the type name and description
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationData.#ctor(System.Int64,System.String,System.Reflection.TypeInfo)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.MigrationData"/> class
            </summary>
            <param name="version">Version of this migration</param>
            <param name="description">Description of this migration. May be null</param>
            <param name="typeInfo">Type of class implementing this migration</param>
        </member>
        <member name="M:SimpleMigrations.MigrationData.#ctor">
            <summary>
            Creates the empty scheme migration
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationData.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>A string representation of the object</returns>
        </member>
        <member name="T:SimpleMigrations.MigrationDirection">
            <summary>
            Represents the direction of a migration
            </summary>
        </member>
        <member name="F:SimpleMigrations.MigrationDirection.Up">
            <summary>
            Migration is going up: the migration being applied is newer than the current version
            </summary>
        </member>
        <member name="F:SimpleMigrations.MigrationDirection.Down">
            <summary>
            Migration is going down: the migration being applied is older than the current version
            </summary>
        </member>
        <member name="T:SimpleMigrations.MigrationException">
            <summary>
            An exception relating to migrations occurred
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationException.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.MigrationException"/> class
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.MigrationException"/> class
            </summary>
            <param name="message">Message to use</param>
        </member>
        <member name="M:SimpleMigrations.MigrationException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.MigrationException"/> class
            </summary>
            <param name="message">Message to use</param>
            <param name="innerException">Inner exception to use</param>
        </member>
        <member name="T:SimpleMigrations.MigrationLoadFailedException">
            <summary>
            Thrown if there was a problem loading the migrations
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationLoadFailedException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.MigrationLoadFailedException"/> class
            </summary>
            <param name="message">Message to use</param>
        </member>
        <member name="T:SimpleMigrations.MigrationNotFoundException">
            <summary>
            Exception thrown when the requested migration could not be found
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationNotFoundException.Version">
            <summary>
            The version of the migration which was requested but not found
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationNotFoundException.#ctor(System.Int64)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.MigrationNotFoundException"/> class
            </summary>
            <param name="version">Version of the migration which was requested but not found</param>
        </member>
        <member name="T:SimpleMigrations.MigrationRunData`1">
            <summary>
            Data passed to <see cref="M:SimpleMigrations.IMigration`1.RunMigration(SimpleMigrations.MigrationRunData{`0})"/>
            </summary>
            <remarks>
            This is split out into a separate class for backwards compatibility
            </remarks>
            <typeparam name="TConnection">Type of database connection which this migration will use</typeparam>
        </member>
        <member name="P:SimpleMigrations.MigrationRunData`1.Connection">
            <summary>
            Connection to use to run the migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationRunData`1.Logger">
            <summary>
            Logger to use to log SQL statements run, and other messages
            </summary>
        </member>
        <member name="P:SimpleMigrations.MigrationRunData`1.Direction">
            <summary>
            Direction to run the migration in
            </summary>
        </member>
        <member name="M:SimpleMigrations.MigrationRunData`1.#ctor(`0,SimpleMigrations.IMigrationLogger,SimpleMigrations.MigrationDirection)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.MigrationRunData`1"/> class
            </summary>
            <param name="connection">Connection to use to run the migration</param>
            <param name="logger">Logger to use to log SQL statements run, and other messages</param>
            <param name="direction">Direction to run the migration in</param>
        </member>
        <member name="T:SimpleMigrations.MissingMigrationException">
            <summary>
            Exception thrown when migration data is missing
            </summary>
            <remarks>
            This happens if SimpleMigrator finds that the database is at a particular version, but can't find
            a migration with that version.
            </remarks>
        </member>
        <member name="P:SimpleMigrations.MissingMigrationException.MissingVersion">
            <summary>
            Gets the version that migration data could not be found for
            </summary>
        </member>
        <member name="M:SimpleMigrations.MissingMigrationException.#ctor(System.Int64)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.MissingMigrationException"/> class with the given missing version
            </summary>
            <param>Version that migration data could not be found for</param>
        </member>
        <member name="T:SimpleMigrations.SimpleMigrator">
            <summary>
            Migrator which uses <see cref="T:System.Data.IDbConnection"/> connections
            </summary>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator.#ctor(SimpleMigrations.IMigrationProvider,SimpleMigrations.IDatabaseProvider{System.Data.Common.DbConnection},SimpleMigrations.ILogger)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.SimpleMigrator"/> class
            </summary>
            <param name="migrationProvider">Migration provider to use to find migration classes</param>
            <param name="databaseProvider"><see cref="T:SimpleMigrations.IDatabaseProvider`1"/> implementation to use</param>
            <param name="logger">Logger to use to log progress</param>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator.#ctor(System.Reflection.Assembly,SimpleMigrations.IDatabaseProvider{System.Data.Common.DbConnection},SimpleMigrations.ILogger)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.SimpleMigrator"/> class
            </summary>
            <param name="migrationsAssembly">Assembly to search for migrations</param>
            <param name="databaseProvider"><see cref="T:SimpleMigrations.IDatabaseProvider`1"/> implementation to use</param>
            <param name="logger">Logger to use to log progress</param>
        </member>
        <member name="T:SimpleMigrations.SimpleMigrator`2">
            <summary>
            Base class for migrators, allowing any database type and custom configuration of migrations
            </summary>
            <typeparam name="TConnection">Type of database connection to use</typeparam>
            <typeparam name="TMigrationBase">Type of migration base class</typeparam>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.MigrationProvider">
            <summary>
            Assembly to search for migrations
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.DatabaseProvider">
            <summary>
            Database provider, providing access to the version table, etc
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.Logger">
            <summary>
            Gets and sets the logger to use. May be null
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.CurrentMigration">
            <summary>
            Gets the currently-applied migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.LatestMigration">
            <summary>
            Gets the latest available migration
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.Migrations">
            <summary>
            Gets all available migrations
            </summary>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.#ctor(SimpleMigrations.IMigrationProvider,SimpleMigrations.IDatabaseProvider{`0},SimpleMigrations.ILogger)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.SimpleMigrator`2"/> class
            </summary>
            <param name="migrationProvider">Migration provider to use to find migration classes</param>
            <param name="databaseProvider">Database provider to use to interact with the version table, etc</param>
            <param name="logger">Logger to use to log progress and messages</param>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.#ctor(System.Reflection.Assembly,SimpleMigrations.IDatabaseProvider{`0},SimpleMigrations.ILogger)">
            <summary>
            Instantiates a new instance of the <see cref="T:SimpleMigrations.SimpleMigrator`2"/> class
            </summary>
            <param name="migrationsAssembly">Assembly to search for migrations</param>
            <param name="databaseProvider">Database provider to use to interact with the version table, etc</param>
            <param name="logger">Logger to use to log progress and messages</param>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.EnsureLoaded">
            <summary>
            Ensure that .Load() has bene called
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:SimpleMigrations.SimpleMigrator`2.Load"/> hasn't yet been called</exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.Load">
            <summary>
            Load all available migrations, and the current state of the database
            </summary>
            <exception cref="T:SimpleMigrations.MissingMigrationException">
            No <see cref="T:SimpleMigrations.IMigration`1"/> could be found which corresponds to the version in the version table
            in your database.
            </exception>
            <exception cref="T:SimpleMigrations.MigrationLoadFailedException">
            There is a problem with the migrations returned by the <see cref="T:SimpleMigrations.IMigrationProvider"/>
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.FindAndSetMigrations">
            <summary>
            Load the migrations, and set <see cref="P:SimpleMigrations.SimpleMigrator`2.Migrations"/>
            </summary>
            <exception cref="T:SimpleMigrations.MigrationLoadFailedException">
            There is a problem with the migrations returned by the <see cref="T:SimpleMigrations.IMigrationProvider"/>
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.SetCurrentVersion(System.Int64)">
            <summary>
            Sets <see cref="P:SimpleMigrations.SimpleMigrator`2.CurrentMigration"/> to the given value
            </summary>
            <exception cref="T:SimpleMigrations.MissingMigrationException">
            No <see cref="T:SimpleMigrations.IMigration`1"/> could be found which corresponds to the version in the version table
            in your database.
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.SetCurrentVersionFromDatabase">
            <summary>
            Sets <see cref="P:SimpleMigrations.SimpleMigrator`2.CurrentMigration"/> by inspecting the database. This must be called within a suitable operation on the
            DatabaseProvider!
            </summary>
            <exception cref="T:SimpleMigrations.MissingMigrationException">
            No <see cref="T:SimpleMigrations.IMigration`1"/> could be found which corresponds to the version in the version table
            in your database.
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.MigrateToLatest">
            <summary>
            Migrate up to the latest version
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:SimpleMigrations.SimpleMigrator`2.Load"/> has not yet been called</exception>
            <exception cref="T:SimpleMigrations.MissingMigrationException">
            After acquiring exclusive access to the database, SimpleMigrator checks its version. This is thrown if
            no <see cref="T:SimpleMigrations.IMigration`1"/> could be found which corresponds to the new version in the
            version table in your database.
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.MigrateTo(System.Int64)">
            <summary>
            Migrate to a specific version
            </summary>
            <param name="newVersion">Version to migrate to</param>
            <exception cref="T:System.InvalidOperationException"><see cref="M:SimpleMigrations.SimpleMigrator`2.Load"/> has not yet been called</exception>
            <exception cref="T:System.ArgumentException">
            The newVersion parameter does not correspond to a migration in <see cref="P:SimpleMigrations.SimpleMigrator`2.Migrations"/>
            </exception>
            <exception cref="T:SimpleMigrations.MissingMigrationException">
            After acquiring exclusive access to the database, SimpleMigrator checks its version. This is thrown if
            no <see cref="T:SimpleMigrations.IMigration`1"/> could be found which corresponds to the new version in the
            version table in your database.
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.RunMigration(SimpleMigrations.MigrationDirection,SimpleMigrations.MigrationData,`0)">
            <summary>
            Instantiate and execute a single migration
            </summary>
            <param name="direction">Diretion to run the migration in</param>
            <param name="migrationData"><see cref="T:SimpleMigrations.MigrationData"/> describing to migration to instantiate and execute</param>
            <param name="connection">Connection to use to execute the migration</param>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.Baseline(System.Int64)">
            <summary>
            Pretend that the database is at the given version, without running any migrations.
            This is useful for introducing SimpleMigrations to an existing database.
            </summary>
            <param name="version">Version to introduce</param>
            <exception cref="T:System.InvalidOperationException">The database has had migrations applied to it</exception>
            <exception cref="T:System.ArgumentException">
            The version parameter does not correspond to a migration in <see cref="P:SimpleMigrations.SimpleMigrator`2.Migrations"/>
            </exception>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.FindMigrationsToRun(System.Int64,SimpleMigrations.MigrationDirection)">
            <summary>
            Find a list of migrations to run, to bring the database up to the given version
            </summary>
            <param name="newVersion">Version to bring the database to</param>
            <param name="direction">Direction of migrations</param>
            <returns>A sorted list of migrations to run, with the first migration to run being first in the collection</returns>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.CreateMigration(SimpleMigrations.MigrationData)">
            <summary>
            Create and configure an instance of a migration
            </summary>
            <param name="migrationData">Data to create the migration for</param>
            <returns>An instantiated and configured migration</returns>
        </member>
        <member name="T:SimpleMigrations.SimpleMigrator`2.MigrationDataPair">
            <summary>
            Helper structure containing a pair of <see cref="T:SimpleMigrations.MigrationData"/>s, describing a step from one version to another
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.MigrationDataPair.From">
            <summary>
            Gets the <see cref="T:SimpleMigrations.MigrationData"/> this migration goes from
            </summary>
        </member>
        <member name="P:SimpleMigrations.SimpleMigrator`2.MigrationDataPair.To">
            <summary>
            Gets the <see cref="T:SimpleMigrations.MigrationData"/> this migration goes to
            </summary>
        </member>
        <member name="M:SimpleMigrations.SimpleMigrator`2.MigrationDataPair.#ctor(SimpleMigrations.MigrationData,SimpleMigrations.MigrationData)">
            <summary>
            Initialises a new instance of the <see cref="T:SimpleMigrations.SimpleMigrator`2.MigrationDataPair"/> structure
            </summary>
            <param name="from"><see cref="T:SimpleMigrations.MigrationData"/> this migration goes from</param>
            <param name="to"><see cref="T:SimpleMigrations.MigrationData"/> this migration goes to</param>
        </member>
    </members>
</doc>
